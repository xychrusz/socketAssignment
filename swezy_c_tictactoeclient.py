"""
Name: Chris Swezy and Dion Tryban
Date: October 30, 2024
Assignment: Assignment 4
Due Date: October 30, 2024
About this project: An online client/server Tic-Tac-Toe game that demonstrates
                    the usage of sockets to send data between machines over the
                    network.
Assumptions:
- The client connects to a server on the localhost.
- The server is started before the client using the same port.
- The first program argument is the port and is an integer.
- The client moves first.
- The client and server take turns making moves.
- Making out of order moves, client/server crashing/losing connection can be
  non-deterministic.

All work below was performed solely by Chris Swezy and Dion Tryban.
We did not use code generated by an AI tool.
"""
import socket
import swezy_c_tictactoegame as game

def runGameLoop(s: socket.socket) -> None:
    # Get the initial board from the server.
    board = game.decodeBoard(s.recv(4096))
    game.printBoard(board)

    server_move = None
    while True:
        # Perform the client move.
        while True:
            # Send the move to the server.
            move = game.getMoveFromUser(server_move)
            s.send(move.encode())

            # Get the updated board back. If received the reason, then print it
            # and we send another move to the server.
            board_or_reason = game.decodeBoard(s.recv(4096))
            if type(board_or_reason) is str:
                print(board_or_reason)
            else:
                board = board_or_reason
                break
        
        game.printBoard(board)

        if game.checkIsGameOver(board, True):
            break

        # Perform the server move.
        print("Wait for your opponent move (don't type anything)!")
        board = game.decodeBoard(s.recv(4096))
        server_move = s.recv(4096).decode()

        game.printBoard(board)

        if game.checkIsGameOver(board, False):
            break


if __name__ == "__main__":
    port = game.getPortFromArgv()
    if port is None:
        exit()

    s = socket.socket()
    try:
        s.connect(("localhost", port))
        runGameLoop(s)
    except ConnectionRefusedError:
        print(f"The server is not reachable at localhost:{port}.")
    except BrokenPipeError:
        print(f"The server disconnected.")

    s.close()
